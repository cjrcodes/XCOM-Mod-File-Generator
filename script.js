let XComContentHeader = ";This file was generated by the XCOM Mod File Generator by @cjrcodes on Github \n;If you would like to contribute or leave feedback, visit https://github.com/cjrcodes/XCOM-Mod-File-Generator \n;To generate new files, visit...\n\n[XComGame.X2BodyPartTemplateManager]\n\n";
let XComGameHeader = ";This file was generated by the XCOM Mod File Generator by @cjrcodes on Github \n;If you would like to contribute or leave feedback, visit https://github.com/cjrcodes/XCOM-Mod-File-Generator \n;To generate new files, visit...\n\n";
var valuesArray = [];
var GendersEnabled = [];
var PartTypesEnabled = [];
var PropertiesEnabled = [];
var SelectionProperties = [];
var ArmorsEnabled = [];
//Head Template Config
let headTC = "+BodyPartTemplateConfig=(PartType=\"Head\", DLCName=\"\",TemplateName=\"\", ArchetypeName=\"\", Gender=eGender_, bCanUseOnCivilian=, bVeteran=)";

console.log(headTC);
//Voice Template Config
let voiceTC = "+BodyPartTemplateConfig=(PartType=\"Voice\", Language=\"\", Gender=eGender_, TemplateName=\"\", ArchetypeName=\"\")";

//Head Prop Template Config
let headPropTC = "+BodyPartTemplateConfig=(PartType=\"\", DLCName=\"\", TemplateName=\"\", ArchetypeName=\"\", Gender=eGender_, bCanUseOnCivilian=, bVeteran=, bAnyArmor=)";

//Body Template Config
let bodyTC = "+BodyPartTemplateConfig=(PartType=\"\", DLCName=\"\", TemplateName=\"\", ArchetypeName=\"\", Gender=eGender_, bCanUseOnCivilian=, bVeteran=, CharacterTemplate=, ArmorTemplate=)";

//Part Types



//Part Type Settings
let ptSettings = ["pt-DefaultSetting", "pt-HeadPropsSetting", "pt-BodyOnlySetting", "pt-BodyExtrasOnlySetting"];

//Default Part Types
let defaultPTs = ["pt-Head", "pt-Torso", "pt-Arms", "pt-Legs"];

//Head Props Part Types
let headPropsPTs = ["pt-Helmets", "pt-FacePropsUpper", "pt-FacePropsLower"];

//Body Part Types
let bodyPTs = ["pt-Torso", "pt-Arms", "pt-Legs"];

//Body Extra Part Types
let bodyExtrasPTs = ["pt-Shins", "pt-LeftArm", "pt-RightArm", "pt-LeftForeArm", "pt-RightForeArm", "pt-LeftArmDeco" , "pt-RightArmDeco" ];

//Voice Part Type
let voicePT = ['pt-Voice'];
//Collection of all Parts Types, excluding Voice
let ptCollection = [ptSettings, defaultPTs, headPropsPTs, bodyPTs, bodyExtrasPTs, voicePT];


//Armor Templates



//Armor Template Settings
let atSettings = ["at-SoldierOnly", "at-ReaperOnly", "at-TemplarOnly", "at-SkirmisherOnly"];

//Soldier Armor Templates
let soldierATs = ["at-KevlarArmor", "at-LightPlatedArmor", "at-MediumPlatedArmor", "at-HeavyPlatedArmor", "at-LightPoweredArmor", "at-MediumPoweredArmor", "at-HeavyPoweredArmor"];

//Reaper Armor Templates
let reaperATs = ["at-ReaperArmor", "at-PlatedReaperArmor", "at-PoweredReaperArmor"];

//Templar Armor Templates
let templarATs = ["at-TemplarArmor", "at-PlatedTemplarArmor", "at-PoweredTemplarArmor"];

//Skirmisher Armor Templates
let skirmisherATs = ["at-SkirmisherArmor", "at-PlatedSkirmisherArmor", "at-PoweredSkirmisherArmor"];

//Collection of all Armor Templates
let atCollection = [atSettings, soldierATs, reaperATs, templarATs, skirmisherATs];

//Text input properties
let textInputProperties = ["prop-Language", "prop-DLCName", "prop-TemplateName", "prop-ArchetypeName-upk", "prop-ArchetypeName-folder", "prop-ArchetypeName-customname"];

//Gender Select
let genderSelect = ["GenderM", "GenderF"];

function ResetArrays(){
    valuesArray = [];
    GendersEnabled = [];
    PartTypesEnabled = [];
    PropertiesEnabled = [];
    SelectionProperties = [];
    ArmorsEnabled = [];

}

//Select all Part Types
function SelectAllPTs() {
    console.log("All Part Types Selected");

    var i;
    var j;
    for (i = 0; i < ptCollection.length; i++) {
        for (j = 0; j < ptCollection[i].length; j++) {
            document.getElementById(ptCollection[i][j]).checked = true;
        }
    }

    document.getElementById('pt-Voice').checked = true;
}

//Deselect all Part Types
function DeselectAllPTs() {
    console.log("All Part Types Deselected");

    var i;
    var j;
    for (i = 0; i < ptCollection.length; i++) {
        for (j = 0; j < ptCollection[i].length; j++) {
            document.getElementById(ptCollection[i][j]).checked = false;
        }
    }

    document.getElementById('pt-Voice').checked = false;
}

//Enable Default Part Types
function DefaultPTsCheck() {

    if (document.getElementById("pt-DefaultSetting").checked == true) {
        console.log("Default Part Types Selected");

        var i;

        for (i = 0; i < defaultPTs.length; i++) {
            document.getElementById(defaultPTs[i]).checked = true;
        }
    } else {
        console.log("Default Part Types Deselected");

        var i;

        for (i = 0; i < defaultPTs.length; i++) {
            document.getElementById(defaultPTs[i]).checked = false;
        }
    }


}

//Enable Head Props Part Types
function HeadPropsPTsCheck() {

    if (document.getElementById("pt-HeadPropsSetting").checked == true) {

        console.log("Head Props Part Types Selected");

        var i;

        for (i = 0; i < headPropsPTs.length; i++) {
            document.getElementById(headPropsPTs[i]).checked = true;
        }
    } else {

        console.log("Head Props Part Types Deselected");

        var i;

        for (i = 0; i < headPropsPTs.length; i++) {
            document.getElementById(headPropsPTs[i]).checked = false;
        }
    }

}

//Enable Body Part Types
function BodyPTsCheck() {

    if (document.getElementById("pt-BodyOnlySetting").checked == true) {
        console.log("Body Part Types Selected");

        var i;

        for (i = 0; i < bodyPTs.length; i++) {
            document.getElementById(bodyPTs[i]).checked = true;
        }
    } else {
        console.log("Body Part Types Deselected");

        var i;

        for (i = 0; i < bodyPTs.length; i++) {
            document.getElementById(bodyPTs[i]).checked = false;
        }
    }
}

//Enable Body Extras Part Types
function BodyExtrasPTsCheck() {

    if (document.getElementById("pt-BodyExtrasOnlySetting").checked == true) {
        console.log("Body Extras Part Types Selected");

        var i;

        for (i = 0; i < bodyExtrasPTs.length; i++) {
            document.getElementById(bodyExtrasPTs[i]).checked = true;
        }
    } else {
        console.log("Body Extras Part Types Deselected");

        var i;

        for (i = 0; i < bodyExtrasPTs.length; i++) {
            document.getElementById(bodyExtrasPTs[i]).checked = false;
        }
    }

}

//Select all Armor Templates
function SelectAllATs() {
    console.log("All Armor Templates Selected");

    var i;
    var j;
    for (i = 0; i < atCollection.length; i++) {
        for (j = 0; j < atCollection[i].length; j++) {
            document.getElementById(atCollection[i][j]).checked = true;
        }
    }

}

//Deselect all Armor Templates
function DeselectAllATs() {
    console.log("All Armor Templates Deselected");

    var i;
    var j;
    for (i = 0; i < atCollection.length; i++) {
        for (j = 0; j < atCollection[i].length; j++) {
            document.getElementById(atCollection[i][j]).checked = false;
        }
    }

}

//Soldier Armor Templates Check
function SoldierATsCheck() {

    if (document.getElementById("at-SoldierOnly").checked == true) {
        console.log("Soldier Armor Templates Selected");

        var i;

        for (i = 0; i < soldierATs.length; i++) {
            document.getElementById(soldierATs[i]).checked = true;
        }
    } else {
        console.log("Soldier Armor Templates Deselected");

        var i;

        for (i = 0; i < soldierATs.length; i++) {
            document.getElementById(soldierATs[i]).checked = false;
        }
    }


}

//Reaper Armor Templates Check
function ReaperATsCheck() {
    if (document.getElementById("at-ReaperOnly").checked == true) {
        console.log("Reaper Armor Templates Selected");

        var i;

        for (i = 0; i < reaperATs.length; i++) {
            document.getElementById(reaperATs[i]).checked = true;
        }
    } else {
        console.log("Reaper Armor Templates Deselected");

        var i;

        for (i = 0; i < reaperATs.length; i++) {
            document.getElementById(reaperATs[i]).checked = false;
        }
    }


}

//Templar Armor Templates Check
function TemplarATsCheck() {
    if (document.getElementById("at-TemplarOnly").checked == true) {
        console.log("Templar Armor Templates Selected");

        var i;

        for (i = 0; i < templarATs.length; i++) {
            document.getElementById(templarATs[i]).checked = true;
        }
    } else {
        console.log("Templar Armor Templates Deselected");

        var i;

        for (i = 0; i < templarATs.length; i++) {
            document.getElementById(templarATs[i]).checked = false;
        }
    }


}

//Skirmisher Armor Templates Check
function SkirmisherATsCheck() {
    if (document.getElementById("at-SkirmisherOnly").checked == true) {
        console.log("Skirmisher Armor Templates Selected");

        var i;

        for (i = 0; i < skirmisherATs.length; i++) {
            document.getElementById(skirmisherATs[i]).checked = true;
        }
    } else {
        console.log("Skirmisher Armor Templates Deselected");

        var i;

        for (i = 0; i < skirmisherATs.length; i++) {
            document.getElementById(skirmisherATs[i]).checked = false;
        }
    }
}

function ReportFormValues() {
    let indexCounter = 0;
    let commentName = document.getElementById("CommentName").value;
    console.log("("+ indexCounter + ")" + "commentName: " + commentName);
    valuesArray[indexCounter] = document.getElementById("CommentName").value;
    console.log("   Part Types");
    var i;
    var j;
    var k = 0;
    indexCounter++;

    //Print PT collection
    for (i = 1; i < ptCollection.length; i++) {
        if (i === 3) {
            continue;
        } else {
            for (j = 0; j < ptCollection[i].length; j++) {
                console.log("("+ indexCounter + ")" + ptCollection[i][j] + ": " + document.getElementById(ptCollection[i][j]).checked);
                valuesArray[indexCounter] = document.getElementById(ptCollection[i][j]).checked;
                indexCounter++;
                if(document.getElementById(ptCollection[i][j]).checked == true){
                    PartTypesEnabled[k] = document.getElementById(ptCollection[i][j]).value;
                    k++;
                }
            }
        }
    }

    //Text Input Values

    console.log("   Text Input Properties");
    k = 0;
    PropertiesEnabled[k] = document.getElementById("CommentName").value;
    k++;
    for (j = 0; j < textInputProperties.length; j++) {
        console.log( "("+ indexCounter + ")" + textInputProperties[j] + ": " + document.getElementById(textInputProperties[j]).value);
        valuesArray[indexCounter] = document.getElementById(textInputProperties[j]).value;
        indexCounter++;

            PropertiesEnabled[k] = document.getElementById(textInputProperties[j]).value;
            k++;
        
    }

    var z = 0;

    //Archetype Append Type
    console.log("   Archetype Append Type");

    console.log("("+ indexCounter + ")" + document.getElementById("ArchetypeAppendType").value);
    valuesArray[indexCounter] = document.getElementById("ArchetypeAppendType").value;
    SelectionProperties[z] = document.getElementById("ArchetypeAppendType").value;
    z++;
    //Gender Select
    console.log("   Gender Selection");
    
    for (j = 0; j < genderSelect.length; j++) {
        indexCounter++;

        console.log("("+ indexCounter + ")" + genderSelect[j] + ": " + document.getElementById(genderSelect[j]).checked);
        valuesArray[indexCounter] = document.getElementById(genderSelect[j]).checked;

        if(document.getElementById(genderSelect[j]).checked == true){
            GendersEnabled[j] =document.getElementById(genderSelect[j]).value;
        }

    }

    //Can Use On Cilvilian
    console.log("   Can Use On Civilian");
    indexCounter++;

    console.log("("+ indexCounter + ")" +document.getElementById("bCivilian").value);
    valuesArray[indexCounter] = document.getElementById("bCivilian").value;
    SelectionProperties[z] = document.getElementById("bCivilian").value;
    z++;

    //Veteran
    console.log("   Veteran");
    indexCounter++;

    console.log("("+ indexCounter + ")" +document.getElementById("bVeteran").value);
    valuesArray[indexCounter] = document.getElementById("bVeteran").value;

    SelectionProperties[z] = document.getElementById("bVeteran").value;
    z++;
    //Any Armor
    console.log("   Any Armor");
    indexCounter++;

    console.log("("+ indexCounter + ")" +document.getElementById("bAnyArmor").value);
    valuesArray[indexCounter] = document.getElementById("bAnyArmor").value;
    SelectionProperties[z] = document.getElementById("bAnyArmor").value;
    z++;

    SelectionProperties[z] = document.getElementById("DisplayName").value;
    //Armor Templates
    console.log("   Armor Templates");
    k = 0;
    for (i = 1; i < atCollection.length; i++) {

        for (j = 0; j < atCollection[i].length; j++) {
            indexCounter++;
            valuesArray[indexCounter] = document.getElementById(atCollection[i][j]).checked;

            console.log("("+ indexCounter + ")" +atCollection[i][j] + ": " + document.getElementById(atCollection[i][j]).checked);
            
            if(document.getElementById(atCollection[i][j]).checked == true){
            ArmorsEnabled[k] = document.getElementById(atCollection[i][j]).value;
            k++;
            }
        }

    }

}

function PrintValuesArray(){
    var i;

    for(i =0; i < valuesArray.length; i++){
        console.log(valuesArray[i]);
    }
}



function GenerateFiles() {
    console.clear();
    console.log("   Generate Files Reached");
    ResetArrays();

    console.log("CommentName");
    console.log(document.getElementById("CommentName").value);

    console.log("PartTypesEnabled");
    console.log(PartTypesEnabled);

    console.log("GendersEnabled");
    console.log(GendersEnabled);

    console.log("PropertiesEnabled");
    console.log(PropertiesEnabled);

    console.log("SelectionProperties");
    console.log(SelectionProperties);

    console.log("ArmorsEnabled");
    console.log(ArmorsEnabled);

    var XComContent = XComContentHeader;
    var XComGame = XComGameHeader;
    ReportFormValues();
    var i;
    var j;
    var k;

    for(i = 0; i < PartTypesEnabled; i++){
        
        if(PartTypesEnabled[i] == "Head" || PartTypesEnabled[i] == "Voice"){
            if(GendersEnabled.length == 0){
            }
        }
    }
    //PrintValuesArray();



   /* if(valuesArray[1] == true){

        XComContent += headTC;
        console.log(XComContent);
    }*/

   //alert("Generate Files Reached");
}

